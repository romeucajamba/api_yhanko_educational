generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id String  @id @default(uuid())
  name String
  email String
  password String
  bornDate String
  expertise AreaOfExpertise
  country Country
  gender Gender
  createdAt DateTime @default(now())

  // Relacionamentos
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  posts Post[]
  profile Profile? 
  profileId Int?
  notifications Notification []
  agenda Agenda []
  graphic UsageEvent?

  @@map("users")
}

enum AreaOfExpertise {
  FRONTEND_DEVELOPER
  BACKEND_DEVELOPER
  FULLSTACK_DEVELOPER
  UI_UX_DESIGNER
  GRAPHIC_DESIGNER
  DATA_SCIENTIST
  DEVOPS
  MOBILE_DEVELOPER
  SECURITY_ENGINEER
  CLOUD_ENGINEER
  AI_ML_ENGINEER
  GAME_DEVELOPER
  DATABASE_ADMINISTRATOR
  PRODUCT_MANAGER
  SYSTEM_ARCHITECT
  IT_SUPPORT
}

enum Country {
  AFGHANISTAN
  ALBANIA
  ALGERIA
  ANDORRA
  ANGOLA
  ARGENTINA
  ARMENIA
  AUSTRALIA
  AUSTRIA
  AZERBAIJAN
  BAHAMAS
  BAHRAIN
  BANGLADESH
  BARBADOS
  BELARUS
  BELGIUM
  BELIZE
  BENIN
  BHUTAN
  BOLIVIA
  BOSNIA_AND_HERZEGOVINA
  BOTSWANA
  BRAZIL
  BRUNEI
  BULGARIA
  BURKINA_FASO
  BURUNDI
  CABO_VERDE
  CAMBODIA
  CAMEROON
  CANADA
  CHAD
  CHILE
  CHINA
  COLOMBIA
  COMOROS
  COSTA_RICA
  CROATIA
  CUBA
  CYPRUS
  CZECH_REPUBLIC
  DENMARK
  DJIBOUTI
  DOMINICA
  DOMINICAN_REPUBLIC
  ECUADOR
  EGYPT
  EL_SALVADOR
  EQUATORIAL_GUINEA
  ERITREA
  ESTONIA
  ESWATINI
  ETHIOPIA
  FIJI
  FINLAND
  FRANCE
  GABON
  GAMBIA
  GEORGIA
  GERMANY
  GHANA
  GREECE
  GRENADA
  GUATEMALA
  GUINEA
  GUINEA_BISSAU
  GUYANA
  HAITI
  HONDURAS
  HUNGARY
  ICELAND
  INDIA
  INDONESIA
  IRAN
  IRAQ
  IRELAND
  ISRAEL
  ITALY
  IVORY_COAST
  JAMAICA
  JAPAN
  JORDAN
  KAZAKHSTAN
  KENYA
  KIRIBATI
  KOREA_NORTH
  KOREA_SOUTH
  KUWAIT
  KYRGYZSTAN
  LAOS
  LATVIA
  LEBANON
  LESOTHO
  LIBERIA
  LIBYA
  LIECHTENSTEIN
  LITHUANIA
  LUXEMBOURG
  MADAGASCAR
  MALAWI
  MALAYSIA
  MALDIVES
  MALI
  MALTA
  MAURITANIA
  MAURITIUS
  MEXICO
  MICRONESIA
  MOLDOVA
  MONACO
  MONGOLIA
  MONTENEGRO
  MOROCCO
  MOZAMBIQUE
  MYANMAR
  NAMIBIA
  NAURU
  NEPAL
  NETHERLANDS
  NEW_ZEALAND
  NICARAGUA
  NIGER
  NIGERIA
  NORTH_MACEDONIA
  NORWAY
  OMAN
  PAKISTAN
  PALAU
  PALESTINE
  PANAMA
  PAPUA_NEW_GUINEA
  PARAGUAY
  PERU
  PHILIPPINES
  POLAND
  PORTUGAL
  QATAR
  ROMANIA
  RUSSIA
  RWANDA
  SAINT_KITTS_AND_NEVIS
  SAINT_LUCIA
  SAINT_VINCENT_AND_THE_GRENADINES
  SAMOA
  SAN_MARINO
  SAO_TOME_AND_PRINCIPE
  SAUDI_ARABIA
  SENEGAL
  SERBIA
  SEYCHELLES
  SIERRA_LEONE
  SINGAPORE
  SLOVAKIA
  SLOVENIA
  SOLOMON_ISLANDS
  SOMALIA
  SOUTH_AFRICA
  SOUTH_SUDAN
  SPAIN
  SRI_LANKA
  SUDAN
  SURINAME
  SWEDEN
  SWITZERLAND
  SYRIA
  TAIWAN
  TAJIKISTAN
  TANZANIA
  THAILAND
  TIMOR_LESTE
  TOGO
  TONGA
  TRINIDAD_AND_TOBAGO
  TUNISIA
  TURKEY
  TURKMENISTAN
  TUVALU
  UGANDA
  UKRAINE
  UNITED_ARAB_EMIRATES
  UNITED_KINGDOM
  UNITED_STATES
  URUGUAY
  UZBEKISTAN
  VANUATU
  VATICAN_CITY
  VENEZUELA
  VIETNAM
  YEMEN
  ZAMBIA
  ZIMBABWE
}

enum Gender {
  MALE
  FEMALE
}

model Profile {
  id Int @id @default(autoincrement())
  bio String?
  residence String?
  tech String?
  connection Int
  profilePictureUrl String?
  coverPictureUrl String?
  userId String @unique

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id String @id @default(uuid())
  content String
  senderId String
  receiverId String
  sentAt DateTime @default(now())

  sender Users @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver Users @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Post {
  id  String   @id @default(uuid())
  title String
  content String
  authorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author    Users @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  type      NotificationType
  timestamp DateTime @default(now())
  isRead    Boolean  @default(false)

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  LIKE
  COMMENT
  MESSAGE
  FOLLOW
}

model Agenda {
  id String   @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  notes Note[]
  tasks Task[]

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id String   @id @default(uuid())
  title String
  content String
  agendaId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agenda    Agenda   @relation(fields: [agendaId], references: [id], onDelete: Cascade)
}

model Task {
  id String @id @default(cuid())
  title String
  description String
  state TaskState
  agendaId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agenda Agenda @relation(fields: [agendaId], references: [id], onDelete: Cascade)
}

enum TaskState {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model UsageEvent {
  id String @id @default(cuid())
  userId String @unique
  action String   // Ex: "create_agenda", "create_post", "update_profile", "chat", etc.
  timestamp DateTime @default(now())

  user Users @relation(fields: [userId], references: [id])
}